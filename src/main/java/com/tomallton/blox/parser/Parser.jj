options
{
  static = false;

  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(Parser)
package com.tomallton.blox.parser;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;

import com.tomallton.blox.parser.Entry;

public class Parser
{
  public static void main(String [] args) throws ParseException
  {
    Parser parser = new Parser(System.in);
    parser.parse();
  }
}

PARSER_END(Parser)

TOKEN :
{
  < #QUOTE : "\"" >
| 
  < #DIGIT : [ "0"-"9" ] >
| 
  < COMMA : "," >
| 
  < COLON : ":" >
| 
  < BRACKET_OPEN : "[" >
| 
  < BRACKET_CLOSE : "]" >
| 
  < BRACE_OPEN : "{" >
|
  < BRACE_CLOSE : "}" >
| 
  < INTEGER : ("-")? (< DIGIT >)+ >
| 
  < DECIMAL : ("-")? (< DIGIT >)* "." (< DIGIT >)+ >
| 
  < STRING : < QUOTE > ("\\n" ~[] | ~["\"", "\\"])* < QUOTE > >
|
  < TRUE : "true" >
| 
  < FALSE : "false" >
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

Object parse() :
{
  Object json;
}
{
  (
    json = array()
  | json = object()
  )
  {
    return json;
  }
}

Object element() :
{
  Object element;
}
{
  (
    element = value()
  | element = array()
  | element = object()
  )
  {
    return element;
  }
}

Object value() :
{
  Object value;
}
{
  (
    (
      value = number()
    )
  |
    (
      value = string()
    )
  | 
    value = booleanValue()
  )
  {
    return value;
  }
}

Number number() :
{
  Token token;
}
{
  (
    token = < INTEGER >
    {
      return new BigInteger(token.image);
    }
  )
|
  (
    token = < DECIMAL >
    {
      return new BigDecimal(token.image);
    }
  )
}

String string() :
{
}
{
  < STRING >
  {
    String image = token.image;
    return image.substring(1, image.length() - 1).replace("\\n", "\n");
  }
}

boolean booleanValue() :
{
  Boolean value;
}
{
  (
    (
    < TRUE >
    {
      value = true;
    }
    )
  | 
    (
    < FALSE >
    {
      value = false;
    }
    )
  )
  {
    return value;
  }
}

List<Object> array() :
{
  List<Object> array = new ArrayList<Object>();
  Object element;
}
{
  < BRACKET_OPEN >
  (
    element = element()
    {
      array.add(element);
    }
    (
      < COMMA > 
      element = element()
      {
        array.add(element);
      }
    )*
  )?
  < BRACKET_CLOSE >
  {
    return array;
  }
}

List<Entry<String, Object>> object() :
{
  List<Entry<String, Object>> object = new LinkedList<Entry<String, Object>>();
  String key;
  Object value;
}
{
  < BRACE_OPEN >
  (
    key = string() < COLON > value = element()
    {
      object.add(Entry.of(key, value));
    }
    (
      < COMMA > 
      key = string() < COLON > value = element()
      {
        object.add(Entry.of(key, value));
      }
    )*
  )?
  < BRACE_CLOSE >
  {
    return object;
  }
}